{"meta":{"title":"My Blog","subtitle":null,"description":null,"author":"xiaomimixiao","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"递归无限极分类","slug":"递归无限极分类","date":"2017-02-12T13:27:42.000Z","updated":"2017-02-28T06:08:46.126Z","comments":true,"path":"2017/02/12/递归无限极分类/","link":"","permalink":"http://yoursite.com/2017/02/12/递归无限极分类/","excerpt":"","text":"&lt;?php /* * 无限极分类 类 */ header(&quot;Content-Type: text/html; charset=UTF-8&quot;); Class Category { //组合一维数组 Static Public function unlimitedForLevel ($cate, $html = &apos;--&apos;, $pid = 0, $level = 0) { $arr = array(); foreach ($cate as $k =&gt; $v) { if ($v[&apos;pid&apos;] == $pid) { $v[&apos;level&apos;] = $level + 1; $v[&apos;html&apos;] = str_repeat($html, $level); $arr[] = $v; $arr = array_merge($arr, self::unlimitedForLevel($cate, $html, $v[&apos;id&apos;], $level + 1)); } } return $arr; } //组合多维数组 Static Public function unlimitedForLayer ($cate, $name = &apos;child&apos;, $pid = 0) { $arr = array(); foreach ($cate as $v) { if ($v[&apos;pid&apos;] == $pid) { $v[$name] = self::unlimitedForLayer($cate, $name, $v[&apos;id&apos;]); $arr[] = $v; } } return $arr; } //传递一个子分类ID返回所有的父级分类 Static Public function getParents ($cate, $id) { $arr = array(); foreach ($cate as $v) { if ($v[&apos;id&apos;] == $id) { $arr[] = $v; $arr = array_merge(self::getParents($cate, $v[&apos;pid&apos;]), $arr); } } return $arr; } //传递一个父级分类ID返回所有子分类ID Static Public function getChildsId ($cate, $pid) { $arr = array(); foreach ($cate as $v) { if ($v[&apos;pid&apos;] == $pid) { $arr[] = $v[&apos;id&apos;]; $arr = array_merge($arr, self::getChildsId($cate, $v[&apos;id&apos;])); } } return $arr; } //传递一个父级分类ID返回所有子分类 Static Public function getChilds ($cate, $pid) { $arr = array(); foreach ($cate as $v) { if ($v[&apos;pid&apos;] == $pid) { $arr[] = $v; $arr = array_merge($arr, self::getChilds($cate, $v[&apos;id&apos;])); } } return $arr; } } $cate = array( 0 =&gt; array(&apos;id&apos; =&gt; 1, &apos;pid&apos; =&gt; 0, &apos;name&apos; =&gt; &apos;江西省&apos;), 1 =&gt; array(&apos;id&apos; =&gt; 2, &apos;pid&apos; =&gt; 0, &apos;name&apos; =&gt; &apos;浙江省&apos;), 2 =&gt; array(&apos;id&apos; =&gt; 3, &apos;pid&apos; =&gt; 1, &apos;name&apos; =&gt; &apos;上饶市&apos;), 3 =&gt; array(&apos;id&apos; =&gt; 4, &apos;pid&apos; =&gt; 3, &apos;name&apos; =&gt; &apos;广丰县&apos;), 4 =&gt; array(&apos;id&apos; =&gt; 5, &apos;pid&apos; =&gt; 2, &apos;name&apos; =&gt; &apos;杭州市&apos;), 5 =&gt; array(&apos;id&apos; =&gt; 6, &apos;pid&apos; =&gt; 5, &apos;name&apos; =&gt; &apos;西湖&apos;), 6 =&gt; array(&apos;id&apos; =&gt; 7, &apos;pid&apos; =&gt; 6, &apos;name&apos; =&gt; &apos;断桥&apos;), ); //print_r(Category::unlimitedForLevel($cate)); print_r(Category::unlimitedForLayer($cate)); //print_r(Category::getParents($cate,7)); //print_r(Category::getChildsId($cate,2)); //print_r(Category::getChilds($cate,2)); // PHP交流群 278528223 ?&gt;","categories":[],"tags":[]},{"title":"PHP实现各种经典算法","slug":"PHP实现各种经典算法","date":"2017-02-12T13:26:26.000Z","updated":"2017-02-12T13:27:02.581Z","comments":true,"path":"2017/02/12/PHP实现各种经典算法/","link":"","permalink":"http://yoursite.com/2017/02/12/PHP实现各种经典算法/","excerpt":"","text":"&lt;?//——————–// 基本数据结构算法//——————–//二分查找（数组里查找某个元素）function bin_sch($array, $low, $high, $k){ if ( $low &lt;= $high){ $mid = intval(($low+$high)/2 ); if ($array[$mid] == $k){ return $mid; }elseif ( $k &lt; $array[$mid]){ return bin_sch($array, $low, $mid-1, $k); }else{ return bin_sch($array, $mid+ 1, $high, $k); } } return -1;}//顺序查找（数组里查找某个元素）function seq_sch($array, $n, $k){ $array[$n] = $k; for($i=0; $i&lt;$n; $i++){ if( $array[$i]==$k){ break; } } if ($i&lt;$n){ return $i; }else{ return -1; }}//线性表的删除（数组中实现）function delete_array_element($array , $i){ $len = count($array); for ($j= $i; $j&lt;$len; $j ++){ $array[$j] = $array [$j+1]; } array_pop ($array); return $array ;}//冒泡排序（数组排序）function bubble_sort( $array){ $count = count( $array); if ($count &lt;= 0 ) return false; for($i=0 ; $i&lt;$count; $i ++){ for($j=$count-1 ; $j&gt;$i; $j–){ if ($array[$j] &lt; $array [$j-1]){ $tmp = $array[$j]; $array[$j] = $array[ $j-1]; $array [$j-1] = $tmp; } } } return $array;}//快速排序（数组排序）function quick_sort($array ) { if (count($array) &lt;= 1) return $array; $key = $array [0]; $left_arr = array(); $right_arr = array(); for ($i= 1; $i&lt;count($array ); $i++){ if ($array[ $i] &lt;= $key) $left_arr [] = $array[$i]; else $right_arr[] = $array[$i ]; } $left_arr = quick_sort($left_arr ); $right_arr = quick_sort( $right_arr); return array_merge($left_arr , array($key), $right_arr);} //————————// PHP内置字符串函数实现//————————//字符串长度function strlen ($str){ if ($str == ‘’ ) return 0; $count = 0; while (1){ if ( $str[$count] != NULL){ $count++; continue; }else{ break; } } return $count;}//截取子串function substr($str, $start, $length=NULL){ if ($str== ‘’ || $start&gt;strlen($str )) return; if (($length!=NULL) &amp;&amp; ( $start&gt;0) &amp;&amp; ($length&gt; strlen($str)-$start)) return; if (( $length!=NULL) &amp;&amp; ($start&lt; 0) &amp;&amp; ($length&gt;strlen($str )+$start)) return; if ($length == NULL) $length = (strlen($str ) - $start); if ($start &lt; 0){ for ($i=(strlen( $str)+$start); $i&lt;(strlen ($str)+$start+$length ); $i++) { $substr .= $str[$i]; } } if ($length &gt; 0){ for ($i= $start; $i&lt;($start+$length ); $i++) { $substr .= $str[$i]; } } if ( $length &lt; 0){ for ($i =$start; $i&lt;(strlen( $str)+$length); $i++) { $substr .= $str[$i ]; } } return $substr; }//字符串翻转function strrev($str){ if ($str == ‘’) return 0 ; for ($i=(strlen($str)- 1); $i&gt;=0; $i –){ $rev_str .= $str[$i ]; } return $rev_str;} //字符串比较function strcmp($s1, $s2){ if (strlen($s1) &lt; strlen($s2)) return -1 ; if (strlen($s1) &gt; strlen( $s2)) return 1; for ($i =0; $i&lt;strlen($s1 ); $i++){ if ($s1[ $i] == $s2[$i]){ continue; }else{ return false; } } return 0;} //查找字符串function strstr($str, $substr){ $m = strlen($str); $n = strlen($substr ); if ($m &lt; $n) return false ; for ($i=0; $i &lt;=($m-$n+1); $i ++){ $sub = substr( $str, $i, $n); if ( strcmp($sub, $substr) == 0) return $i; } return false ;}//字符串替换function str_replace($substr , $newsubstr, $str){ $m = strlen($str); $n = strlen($substr ); $x = strlen($newsubstr ); if (strchr($str, $substr ) == false) return false; for ( $i=0; $i&lt;=($m- $n+1); $i++){ $i = strchr($str, $substr); $str = str_delete ($str, $i, $n); $str = str_insert($str, $i, $newstr); } return $str ;} //——————–// 自实现字符串处理函数//——————–//插入一段字符串function str_insert($str, $i , $substr){ for($j=0 ; $j&lt;$i; $j ++){ $startstr .= $str[$j ]; } for ($j=$i; $j","categories":[],"tags":[]},{"title":"php 敏感词替换","slug":"php-敏感词替换","date":"2017-02-12T13:25:21.000Z","updated":"2017-02-12T13:25:49.540Z","comments":true,"path":"2017/02/12/php-敏感词替换/","link":"","permalink":"http://yoursite.com/2017/02/12/php-敏感词替换/","excerpt":"","text":"&lt;?php$badword = array( ‘魔客吧’,’www.moke8.ccom’);$badword1 = array_combine($badword,array_fill(0,count($badword),’‘));$bb = ‘我的网站的名字叫做魔客吧，我的网站的网址是www.moke8.com’;$str = strtr($bb, $badword1);echo $str;?&gt;输出：我的网站的名字叫做，我的网站的网址是*","categories":[],"tags":[]},{"title":"CentOS7安装mongodb","slug":"CentOS7安装mongodb","date":"2017-02-12T13:23:14.000Z","updated":"2017-02-12T13:24:02.138Z","comments":true,"path":"2017/02/12/CentOS7安装mongodb/","link":"","permalink":"http://yoursite.com/2017/02/12/CentOS7安装mongodb/","excerpt":"","text":"1、下载wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.2.8.tgz 2、解压tar zxvf MongoDB-Linux-x86_64-rhel70-3.2.8.tgzmv mongodb-linux-x86_64-rhel70-3.2.8 /usr/local/mv mongodb-linux-x86_64-rhel70-3.2.8 mongodbcd mongodb/ mkdir dbmkdir logscd bin/3、编辑配置文件：vim mongodb.conf输入以下内容：dbpath=/usr/local/mongodb/dblogpath=/usr/local/mongodb/logs/mongodb.logbind_ip=0.0.0.0port=27017fork=truenohttpinterface=true 4、创建新的账号：groupadd mongodbuseradd mongodb -g mongodbcd ../../chown -R mongodb:mongodb mongodb 5、启动：/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/bin/mongodb.conf 6、设置开机自动启动mongodbvi /etc/rc.d/rc.local/usr/local/mongodb/bin/mongod –config /usr/local/mongodb/bin/mongodb.conf 进入mongodb的shell模式：/usr/local/mongodb/bin/mongo查看数据库列表：show dbs查看当前db版本：db.version(); 7、增加管理员权限： userAdminAnyDatabase 这个角色拥有分配角色和用户的权限，但没有查写的缺陷root 这是超级管理员readWrite 有读写权限read 有读权限 进入shell模式：/usr/local/mongodb/bin/mongo use admin //切换到admin数据库 db.createUser({user: “root”,pwd: “testMongoDB2016”,roles:[{role:”root”, db:”admin”}]}); db.createUser({user: “mongoRoot”,pwd: “testMongoDB2016”,roles:[{role:”userAdminAnyDatabase”, db:”admin”}]});验证一下，在哪里注册用户的要去哪个db里认证：db.auth(“mongoRoot”, “testMongoDB2016”)此后可以用这个mongoRoot账号去创建某一数据库管理账号：db.createUser({user:”hhq163”,pwd:”test123456”,roles:[{“role”:”readWrite”,”db”:”admin”}]}) 但发现此时增加的账号不能在客户端登录，原因是mongodb版本错了：先退出 mongod 服务 use admindb.auth(“root”, “testMongoDB2016”)db.shutdownServer()再在无认证情况下打开 mongoduse admindb.dropUser(“hhq163”)db.system.version.update({ “_id”:”authSchema”},{$set:{“currentVersion”:3}})db.createUser({user:”hhq163”,pwd:”test123456”,roles:[{“role”:”readWrite”,”db”:”admin”}]})再以认证的形式启动mongodb 如果需要创建某一个新DB的账号：需要在shell下执行：use TestDBdb.createUser({user:”hhq163”,pwd:”test123456”,roles:[{“role”:”readWrite”,”db”:”TestDB”}]}) vim /usr/local/mongodb/bin/mongodb.conf在文件末尾增加以下这一行：auth=true 8、关闭数据库服务器：use admindb.shutdownServer() 如果开户安全认证，则要先认证：use admindb.auth(“root”, “testMongoDB2016”)db.shutdownServer()","categories":[],"tags":[]},{"title":"mongondb 的使用","slug":"hexo-搭建个人博客","date":"2016-02-12T11:38:49.000Z","updated":"2017-02-13T02:58:01.051Z","comments":true,"path":"2016/02/12/hexo-搭建个人博客/","link":"","permalink":"http://yoursite.com/2016/02/12/hexo-搭建个人博客/","excerpt":"","text":"PHP 扩展mongon.mod.dll下载http://cn.php.NET/manual/en/mongo.installation.php#mongo.installation.windows然后php.ini添加 extension=php_mongo.dll最后phpinfo() 查找到 表标PHP已经自带了mongo功能，你就可以操作下面的代码（但是你必须有安装MongoDB服务器） 一、连接数据库 使用下面的代码创建一个数据库链接复制代码 代码如下:&lt;?php$connection = new Mongo(mongodb://192.168.1.5:27017); //链接到 192.168.1.5:27017//27017端口是默认的。$connection = new Mongo( “example.com” ); //链接到远程主机(默认端口)$connection = new Mongo( “example.com:65432” ); //链接到远程主机的自定义的端口print_r($connection-&gt;listDBs());//能打印出数据库数组，看看有几个数据库。 ?&gt; 如图： 上图说有一个数据库名字叫local,总大小1个字节，他是空的。看见ok表示运行成功。 现在你可以使用$connection链接来操作数据库了 选择数据库 使用下面的代码来选择一个数据库复制代码 代码如下:&lt;?php$db = $connection-&gt;dbname;?&gt; 这里的数据库并不一定是一个已经存在的数据库，如果所选择的数据库不存在，则会新建一个数据库，所以在选择数据库的时候，注意一定要填上正确的数据库名如果拼写错误的话，很有可能会新建一个数据库复制代码 代码如下:&lt;?php$db = $connection-&gt;mybiglongdbname;//做一些事情$db = $connection-&gt;mybiglongdbnme;//现在会连上一个新的数据库?&gt; 获取一个集合 获取一个集合跟选择数据库拥有相同的语法格式复制代码 代码如下:&lt;?php$db = $connection-&gt;baz;//选择数据库$collection = $db-&gt;foobar;//选择foobar集合//或者使用更简洁的方式$collection = $connection-&gt;baz-&gt;foobar;?&gt; 插入一个文档 多维数组是可以被储存到数据库中的基本单元一个随机的文档可能是这样复制代码 代码如下:&lt;?php$doc = array( ”name” =&gt; “MongoDB”, “type” =&gt; “database”, “count” =&gt; 1, “info” =&gt; (object)array( “x” =&gt; 203, “y” =&gt; 102), “versions” =&gt; array(“0.9.7″, “0.9.8″, “0.9.9″));?&gt; 注意：你可以嵌套数组与对象，对象与文档在mongodb中几乎是一样的，你可以使用$doc调用一个文档或对象，但是info字段总是一个对象而不是一个文档，本约束适用于所有文档使用MongoCollection::insert()插入一个文档复制代码 代码如下:&lt;?php$m = new Mongo();$collection = $m-&gt;foo-&gt;bar;$collection-&gt;insert($doc);?&gt; mongodb 的 insert()、save() ，区别主要是：若存在主键，insert() 不做操作，而save() 则更改原来的内容为新内容。存在数据： { _id : 1, “ name “ : “ n1 “ }insert({ _id : 1, “ name “ : “ n2 “ }) 会提示错误save({ _id : 1, “ name “ : “ n2 “ }) 会把 n1 改为 n2 。 使用MongoCollection::findOne()查询文档 为了证明上面那段代码的数据已经插入到数据库里了，我们进行简单的 findOne()操作以得到集合中的第一个文档数据，这种方法只返回一个文档数据，这种方法适用于在你的查询语句的时候只匹配一个文档或者你只关心第一条数据复制代码 代码如下:&lt;?php$obj = $collection-&gt;findOne();var_dump( $obj );?&gt; 你会看到下列结果复制代码 代码如下:array(5) { [“_id”]=&gt; object(MongoId)#6 (0) { } [“name”] string(7) “MongoDB” [“type”]=&gt; string(8) “database” [“count”]=&gt; int(1) [“info”]=&gt; array (2) { [“x”]=&gt; int(203) [“y”]=&gt; int(102) } [“versions”] array(3) { [0]=&gt; string(5) “0.9.7″ [1]=&gt; string(5) “0.9.8″ [2]=&gt; string(5) “0.9.9″ }} 注意id字段自动加载了文档上，MongoDB储存元素中以以及$开头的都是供内部使用的 添加更多文档 为了做一些更有趣的事情，我们添加更多简单的文档到集合中，这些文档如下复制代码 代码如下:&lt;?phparray( “i” =&gt; value );?&gt; 我们可以使用循环相当有效的插入数据复制代码 代码如下:&lt;?phpfor($i=0; $iinsert( array( “i” =&gt; $i ) );}?&gt; 注意：我们可以插入不同的字段在同一字符集中，在这方面意味着MongoDB拥有非常自由的储存模式 在一个集合中计算文档的数量 现在我们插入了101个文档(我们用循环插入了100个，之前还插入了一个)，我们可以使用count()来看看我们的数据是不是都被插入进去了复制代码 代码如下: &lt;?phpecho $collection-&gt;count();?&gt; 这段代码将打印出101 MongoCollection::count() 也可以查询字段数据 使用游标得到集合中的所有文档 为了得到集合中的所有文档，我们可以使用 MongoCollection::find()方法，find()方法返回一个 MongoCursor对象，可以让我们重复得到查询所匹配的的文档复制代码 代码如下:&lt;?php$cursor = $collection-&gt;find();foreach ($cursor as $id =&gt; $value) { echo “$id: “; var_dump( $value );}?&gt; 这样我们会打印出集合中的这101个文档，$id就是文档中的_id字段，$value 就是文档本身 为查询规定一个标准我们可以通过find()方法得到集合中的文档子集，例如，我们要查询出集合中i字段为71的文档，我们可以使用下列方法复制代码 代码如下:&lt;?php$query = array( “i” =&gt; 71 );$cursor = $collection-&gt;find( $query );while( $cursor-&gt;hasNext() ) { var_dump( $cursor-&gt;getNext() );}?&gt; 我们将打印如下数据复制代码 代码如下:array(2) { [“_id”]=&gt; object(MongoId)#6 (0) { } [“i”]=&gt; int(71) [“_ns”]=&gt; “testCollection”} 为查询设定一个范围 我们可以通过find()创建一个查询语句以得集合中的一个子集，例如如果我们得到所有”i”&gt;50的文档，我们可以使用如下代码复制代码 代码如下:&lt;?php$query = array( “i” =&gt; array(‘$gt’ =&gt;50)); //注意’$gt’两边的单引号$cursor = $coll-&gt;find( $query );while( $cursor-&gt;hasNext() ) { var_dump( $cursor-&gt;getNext() );}?&gt; 我们同样可以得到20 &lt; i &lt;= 30之间的数据复制代码 代码如下:&lt;?php$query = array( “i” =&gt; array( “\\$gt” =&gt; 20, “\\$lte” =&gt; 30 ) );$cursor = $coll-&gt;find( $query );while( $cursor-&gt;hasNext() ) { var_dump( $cursor-&gt;getNext() );}?&gt; 我们非常容易漏掉$美元符号，你也可以选择你自定义的符号来代替美元符号，选择一个不会在你的建里面出现的符号例如”:”,在php.ini中加上这么一句话复制代码 代码如下:mongo.cmd = “:” 那么上面的代码就可以替换成复制代码 代码如下:&lt;?php$query = array( “i” =&gt; array( “:gt” =&gt; 20, “:lte” =&gt; 30 ) );?&gt; 当然你也可以使用ini_set(“mongo.cmd”, “:”)的方法来改变 创建一个索引 MongoDB支持索引，并且可以很容易的加到一个集合中，你只要指定某个字段为索引就行了，并且还可以指定 正序索引(1)与 倒序索引(-1)下面的代码为I创建了索引复制代码 代码如下:&lt;?php$coll-&gt;ensureIndex( array( “i” =&gt; 1 ) ); //在”i”上创建了一个索引$coll-&gt;ensureIndex( array( “i” =&gt; -1, “j” =&gt; 1 ) );//在”i”上创建了倒序索引 在”j”上创建了正序索引?&gt; 一个完整的简单例子 这个例子展示了如何链接mongodb数据库，如何选择数据库，如何插入数据，如何查询数据，以及关闭数据库链接复制代码 代码如下:&lt;?php//链接$m = new Mongo(); // 选择一个数据库$db = $m-&gt;comedy;$collection = $db-&gt;cartoons; //添加一个元素$obj = array( “title” =&gt; “Calvin and Hobbes”, “author” =&gt; “Bill Watterson” );$collection-&gt;insert($obj); //修改$newdata = array(‘$set’ =&gt; array(“title” =&gt; “Calvin and Hobbes”));$collection-&gt;update(array(“author” =&gt; “caleng”), $newdata);//删除$collection-&gt;remove(array(‘author’=&gt;’caleng’), array(“justOne” =&gt; true)); //添加另一个元素，使用不同的格式$obj = array( “title” =&gt; “XKCD”, “online” =&gt; true );$collection-&gt;insert($obj); //查询所有的集合$cursor = $collection-&gt;find(); //重复显示结果foreach ($cursor as $obj) { echo $obj[“title”] . “\\n”;} // 关闭链接$m-&gt;close();?&gt; 输出结果为复制代码 代码如下:Calvin and HobbesXKCD","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2016-02-12T10:30:43.000Z","updated":"2017-02-12T13:05:16.062Z","comments":true,"path":"2016/02/12/hello-world/","link":"","permalink":"http://yoursite.com/2016/02/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}